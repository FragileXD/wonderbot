2020/02/10 14:02:08 wonderlandpark#9999 : ,ping
2020/02/10 14:02:76 wonderlandpark#9999 : ,help
2020/02/10 14:02:81 wonderlandpark#9999 : ,eval gg
2020/02/10 14:02:47 wonderlandpark#9999 : ,eval client.guilds
2020/02/10 14:02:01 wonderlandpark#9999 : ,eval client.guilds[message.guild.id]
2020/02/10 14:02:86 wonderlandpark#9999 : ,eval message.guild.id
2020/02/10 14:02:39 wonderlandpark#9999 : ,eval client.guilds['542599372836438016']
2020/02/10 14:02:89 wonderlandpark#9999 : ,eval client
2020/02/10 14:02:04 wonderlandpark#9999 : ,eval client.filter(el=>type of el)
2020/02/10 14:02:80 wonderlandpark#9999 : ,eval type of el
2020/02/10 14:02:01 wonderlandpark#9999 : ,eval client.filter(el=>typeof el)
2020/02/10 14:02:68 wonderlandpark#9999 : ,eval typeof client
2020/02/10 14:02:91 wonderlandpark#9999 : ,eval client
2020/02/10 14:02:36 wonderlandpark#9999 : ,eval clinet.map()
2020/02/10 14:02:44 wonderlandpark#9999 : ,eval client.map()
2020/02/10 14:02:42 wonderlandpark#9999 : ,eval Object.filter = function( obj, predicate) {
    var result = {}, key;
    // ---------------^---- as noted by @CMS, 
    //      always declare variables with the "var" keyword

    for (key in obj) {
        if (obj.hasOwnProperty(key) && !predicate(obj[key])) {
            result[key] = obj[key];
        }
    }

    return result;
};
2020/02/10 14:02:59 wonderlandpark#9999 : ,eval Object.prototype.filter = function(predicate) {
    var result = {}, key;
    for (key in this) {
        if (this.hasOwnProperty(key) && !predicate(thisj[key])) {
            result[key] = this[key];
        }
    }

    return result;
};
2020/02/10 14:02:33 wonderlandpark#9999 : ,eval {h:1, a:1, c:0}.filter(1)
2020/02/10 14:02:34 wonderlandpark#9999 : ,eval Object.prototype.filter = function(predicate) {
    var result = {}, key;
    for (key in this) {
        if (this.hasOwnProperty(key) && !predicate(this[key])) {
            result[key] = this[key];
        }
    }

    return result;
};
2020/02/10 14:02:56 wonderlandpark#9999 : ,eval {h:1, a:1, c:0}.filter(1)
2020/02/10 14:02:09 wonderlandpark#9999 : ,eval {h:1, a:1, c:0}.filter(a=>a==1)
2020/02/10 14:02:69 wonderlandpark#9999 : ,wonderbot maintain
2020/02/10 14:02:72 wonderlandpark#9999 : ,wonderbot maintain
2020/02/10 14:02:15 wonderlandpark#9999 : ,wonderbot maintain --sudo
2020/02/10 14:02:10 wonderlandpark#9999 : ,wonderbot maintain --sudo
2020/02/10 14:02:68 wonderlandpark#9999 : ,wonderbot maintain --sudo
2020/02/10 14:02:80 wonderlandpark#9999 : ,eval [ { name: '--sudo', value: undefined } ].find(el=>el.name=='--sudo')
2020/02/10 14:02:21 wonderlandpark#9999 : ,wonderbot maintain
2020/02/10 14:02:16 wonderlandpark#9999 : ,wonderbot maintain --s
2020/02/10 14:02:97 wonderlandpark#9999 : ,ping
2020/02/10 14:02:88 wonderlandpark#9999 : ,wonderbot maintain --s
2020/02/10 14:02:11 wonderlandpark#9999 : ,ping
2020/02/10 14:02:31 wonderlandpark#9999 : ,ping
2020/02/10 14:02:18 wonderlandpark#9999 : ,wonderbot maintain -s
2020/02/10 14:02:55 wonderlandpark#9999 : ,wonderbot maintain --s
2020/02/10 14:02:57 wonderlandpark#9999 : ,ping
2020/02/10 14:02:94 wonderlandpark#9999 : ,wonderbot maintain --s
2020/02/10 14:02:93 wonderlandpark#9999 : ,ping
2020/02/10 14:02:76 SUO#8627 : ,ping
